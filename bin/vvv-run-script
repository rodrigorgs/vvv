#!/usr/bin/env ruby

require 'fileutils'

def output_successful?(output_string)
  match = (output_string =~ /^([#][#] Error[:].*)$/m)
  if match
    STDERR.puts($1)
  end
  match.nil?
end

def create_notebook(path)
  dir = File.dirname(path)
  filename = File.basename(path)
  filename_no_ext = File.basename(filename, ".*")

  oldpwd = FileUtils.pwd
  FileUtils.chdir(dir)

  ENV['LC_ALL'] = 'en_US.UTF-8'
  system %Q[Rscript -e "library(knitr); knitr::spin('#{filename}')"]
  ret = output_successful?(IO.read("#{filename_no_ext}.md"))
  FileUtils.rm "#{filename_no_ext}.md" if File.exist?("#{filename_no_ext}.md")
  FileUtils.mv "#{filename_no_ext}.html", '../report' if File.exist?("#{filename_no_ext}.html") && File.directory?("../report")

  # # Fix rCharts bugw
  # sed -i ".bak" -e 's/\\\\n/\\n/g' figure/*.html
  # rm figure/*.bak

  FileUtils.chdir(oldpwd)

  ret
end

def execute_script(basename, script_dir)
  ret = nil
  if basename =~ /\.[Rr]$/
    ret = create_notebook basename
  elsif basename =~ /\.rb$/
    html = basename.gsub(/\.rb$/, '.html')
    ret = system "ruby #{basename} > ../report/#{html}"
    contents = IO.read("../report/#{html}")
    File.open("../report/#{html}", 'w') do |f|
      f.write "<pre>#{contents}</pre>"
    end
  end
  ret
end

def force_run(path)
  ret = nil
  basename = File.basename(path)
  dirname = File.dirname(path)
  script_dir = File.expand_path(File.dirname(__FILE__))
  pwd = FileUtils.pwd
  
  FileUtils.chdir(dirname)
  puts
  puts "*******************************************"
  puts "*** Running script #{basename}..."
  puts "*******************************************"
  begin
    ret = execute_script(basename, script_dir)
  ensure
    FileUtils.chdir(pwd)
  end
end

# RUN
path = ARGV[0]
ret = force_run(path)
exit ret ? 0 : 1
