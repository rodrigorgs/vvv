#!/usr/bin/env ruby

begin
  require 'vvv'
rescue LoadError
  require 'rubygems'
  require 'vvv'
end
require 'json'
require 'fileutils'

def write_if_different(file, contents)
  old_contents = File.exist?(file) ? IO.read(file) : nil
  if old_contents.nil? || old_contents != contents
    puts "overwriting #{file}"
    File.open(file, 'w') { |f| f.write(contents) }
  else
    puts "skipping #{file}"
  end
end

def copy_if_different(orig, dest)
  a = IO.read(orig)
  b = File.exist?(dest) ? IO.read(dest) : nil
  if b.nil? || a != b
    puts "copying #{orig} to #{dest}"
    FileUtils.cp orig, dest
  else
    puts "skipping #{orig}"
  end
end

# Weave template files
json = JSON.parse(IO.read('Varconf.json'))
json.each_pair do |script, confs|
  file = VariableScript.new(script)

  if file.original_name == 'join.R'
    output_path = "script/#{file.original_name}"
    contents = file.contents_for_multiple_configurations(confs)
    write_if_different(output_path, contents)
  else
    confs.each do |conf|
      output_path = "script/#{file.name_for_configuration(conf)}"
      contents = file.contents_for_configuration(conf)
      contents = "# Configuration: #{conf.inspect}\n" + contents
      write_if_different(output_path, contents)
    end
  end
end

# Copy non-template files
all_files = Dir.entries("template").grep(/^[^.]/)
templates = json.keys
(all_files - templates).each do |file|
  copy_if_different "template/#{file}", "script/#{file}"
end
